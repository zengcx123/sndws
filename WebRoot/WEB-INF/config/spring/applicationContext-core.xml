<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd 
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">
	<mvc:annotation-driven />
	<!-- 属性资源读取 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>/WEB-INF/config/properties/application.properties</value>
			</list>
		</property>
		<!-- 
		<property name="ignoreUnresolvablePlaceholders" value="true"/>
		 -->
	</bean>
	<!-- 
	<util:properties id="applicationProps"
		location="/WEB-INF/config/properties/application.properties" />
	 -->
	<!-- 静态资源访问 -->
	<!-- <mvc:resources mapping="/resources-#{applicationProps['application.version']}/**" 
		location="/resources/" /> -->
	<!-- 全局组件扫描 -->
	<context:component-scan base-package="com.oceansoft.sndws">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<context:component-scan base-package="com.oceansoft.sndws">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<bean class="com.oceansoft.sndws.dao.impl.WorkflowDao">
		<constructor-arg index="0" name="workflowUrl" type="java.lang.String" value="${url.workflow}"/>
	</bean>
	<!-- 视图解释类 -->
	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<!-- 设置为true以忽略对Accept Header的支持 -->
		<property name="ignoreAcceptHeader" value="true" />
		<!-- 在没有扩展名时默认展现形式 -->
		<property name="defaultContentType" value="text/html" />
		<!-- 扩展名至mimeType的映射 -->
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
			</map>
		</property>
		<!-- 用于开启 /userinfo/123?format=json 的支持 -->
		<property name="favorParameter" value="true" />
		<property name="viewResolvers">
			<list>
				<bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />
				<!--JSP视图 -->
				<bean
					class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="viewClass"
						value="org.springframework.web.servlet.view.JstlView" />
					<property name="prefix" value="/WEB-INF/views/" />
					<property name="suffix" value=".jsp" />
					<property name="order" value="1" />
				</bean>
			</list>
		</property>
		<property name="defaultViews">
			<list>
				<!-- JSON -->
				<bean
					class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
					<property name="prefixJson" value="false" />
				</bean>
			</list>
		</property>
	</bean>
	<import resource="classpath:org/codehaus/xfire/spring/xfire.xml" />
	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<!-- 
		<property name="driverClassName" value="#{applicationProps['jdbc.driverClassName']}" />
		<property name="url" value="#{applicationProps['jdbc.url']}" />
		<property name="username" value="#{applicationProps['jdbc.username']}" />
		<property name="password" value="#{applicationProps['jdbc.password']}" />
		 -->
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 连接池启动时的初始值 -->
		  <property name="initialSize" value="1" />  
		<!-- 连接池的最大值 -->
		<property name="maxActive" value="500" />
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		<property name="maxIdle" value="2" />
		<!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		 <property name="minIdle" value="1" /> 
	</bean>
	<!-- JDBC操作模板类 -->
	<bean id="namedParameterJdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>
	<bean id="simpleJdbcInsert" class="org.springframework.jdbc.core.simple.SimpleJdbcInsert"
		scope="prototype">
		<constructor-arg ref="dataSource" />
	</bean>
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- websphere下用 <bean id="nativeJdbcExtractor" class="org.springframework.jdbc.support.nativejdbc.WebSphereNativeJdbcExtractor" 
		lazy-init="true" /> -->
	<bean id="nativeJdbcExtractor"
		class="org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor"
		lazy-init="true" />

	<bean id="oracleLobHandler" class="org.springframework.jdbc.support.lob.OracleLobHandler"
		lazy-init="true">
		<property name="nativeJdbcExtractor" ref="nativeJdbcExtractor" />
	</bean>
	<!--声明式事务控制 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 指定事务切入点 -->
	<!-- <aop:config> <aop:pointcut id="transactionOperation" expression="execution(* 
		com.oceansoft.sndws.processor.*.*(..))" /> <aop:advisor advice-ref="txAdvice" 
		pointcut-ref="transactionOperation" /> </aop:config> -->
	<!-- 定义事务切面 -->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager"> 
		<tx:attributes> <tx:method name="get*" read-only="true" /> <tx:method name="query*" 
		read-only="true" /> <tx:method name="find*" read-only="true" /> <tx:method 
		name="load*" read-only="true" /> <tx:method name="process*" propagation="REQUIRED"/> 
		<tx:method name="insert*" propagation="REQUIRED"/> <tx:method name="update*" 
		propagation="REQUIRED"/> <tx:method name="save*" propagation="REQUIRED"/> 
		<tx:method name="add*" propagation="REQUIRED"/> <tx:method name="create*" 
		propagation="REQUIRED"/> <tx:method name="del*" propagation="REQUIRED"/> 
		<tx:method name="remove*" propagation="REQUIRED"/> <tx:method name="batchCommit*" 
		propagation="REQUIRED"/> <tx:method name="*" rollback-for="Exception" /> 
		</tx:attributes> </tx:advice> -->
	<!-- 文件上传解析器 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="3145728" />
	</bean>
	<!-- 全局异常处理 -->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="defaultErrorView" value="/error/error" />
		<property name="defaultStatusCode" value="500" />
		<property name="warnLogCategory">
			<value>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver
			</value>
		</property>
	</bean>
</beans>